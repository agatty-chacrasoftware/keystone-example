// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
  posts    Post[] @relation("Post_author")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Car {
  id                String    @id @default(cuid())
  model             String    @default("")
  brand             String    @default("")
  price             Int
  yearOfManufacture Int
  upgradeList       Upgrade[] @relation("Upgrade_cars")
}

model Upgrade {
  id          String  @id @default(cuid())
  upgardeYear Int
  cars        Car?    @relation("Upgrade_cars", fields: [carsId], references: [id])
  carsId      String? @map("cars")

  @@index([carsId])
}

model Student {
  id    String            @id @default(cuid())
  name  String            @default("") @map("studentName")
  class StudentClassType? @map("class")
  books BookAssignment[]  @relation("BookAssignment_studentName")
}

model Book {
  id                 String            @id @default(cuid())
  title              String            @default("") @map("bookTitle")
  category           BookCategoryType?
  assignedToStudents BookAssignment[]  @relation("BookAssignment_bookName")
}

model BookAssignment {
  id            String   @id @default(cuid())
  bookName      Book?    @relation("BookAssignment_bookName", fields: [bookNameId], references: [id])
  bookNameId    String?  @map("bookName")
  studentName   Student? @relation("BookAssignment_studentName", fields: [studentNameId], references: [id])
  studentNameId String?  @map("studentName")

  @@index([bookNameId])
  @@index([studentNameId])
}

enum StudentClassType {
  firstYear
  secondYear
}

enum BookCategoryType {
  ComputerScience
  Arts
  Business
  Accounts
}