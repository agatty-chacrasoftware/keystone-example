// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
  posts    Post[] @relation("Post_author")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Car {
  id                String    @id @default(cuid())
  model             String    @default("")
  brand             String    @default("")
  price             Int
  yearOfManufacture Int
  upgradeList       Upgrade[] @relation("Upgrade_cars")
}

model Upgrade {
  id          String  @id @default(cuid())
  upgardeYear Int
  cars        Car?    @relation("Upgrade_cars", fields: [carsId], references: [id])
  carsId      String? @map("cars")

  @@index([carsId])
}

model Student {
  id    String            @id @default(cuid())
  name  String            @default("") @map("studentName")
  class StudentClassType? @map("class")
  books Book[]            @relation("Book_assignToStudent")
}

model Book {
  id                String            @id @default(cuid())
  title             String            @default("") @map("bookTitle")
  category          BookCategoryType?
  assignToStudent   Student?          @relation("Book_assignToStudent", fields: [assignToStudentId], references: [id])
  assignToStudentId String?           @map("assignToStudent")

  @@index([assignToStudentId])
}

model Customer {
  id          String    @id @default(cuid())
  name        String    @default("") @map("name")
  email       String    @unique @default("") @map("email")
  address     String    @default("") @map("Address")
  pincode     Int?
  phoneNumber Int?
  bookedRooms Booking[] @relation("Booking_customer")
}

model Hotel {
  id      String @id @default(cuid())
  name    String @default("") @map("hotelName")
  branch  String @default("") @map("branchName")
  country String @default("India") @map("country")
  rooms   Room[] @relation("Room_hotelBranch")
}

model Room {
  id              String   @id @default(cuid())
  name            String   @default("") @map("roomNo")
  roomDescription String   @default("") @map("roomDescription")
  roomPrice       Int?
  hotelBranch     Hotel?   @relation("Room_hotelBranch", fields: [hotelBranchId], references: [id])
  hotelBranchId   String?  @map("hotelBranch")
  bookings        Booking? @relation("Room_bookings", fields: [bookingsId], references: [id])
  bookingsId      String?  @map("bookings")

  @@index([hotelBranchId])
  @@index([bookingsId])
}

model Booking {
  id         String    @id @default(cuid())
  customer   Customer? @relation("Booking_customer", fields: [customerId], references: [id])
  customerId String?   @map("customer")
  rooms      Room[]    @relation("Room_bookings")
  checkIn    DateTime?
  checkOut   DateTime?

  @@index([customerId])
}

enum StudentClassType {
  firstYear
  secondYear
}

enum BookCategoryType {
  ComputerScience
  Arts
  Business
  Accounts
}