# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Car {
  id: ID!
  model: String
  brand: String
  price: Int
  yearOfManufacture: Int
  upgradeList(
    where: UpgradeWhereInput! = {}
    orderBy: [UpgradeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Upgrade!]
  upgradeListCount(where: UpgradeWhereInput! = {}): Int
}

input CarWhereUniqueInput {
  id: ID
}

input CarWhereInput {
  AND: [CarWhereInput!]
  OR: [CarWhereInput!]
  NOT: [CarWhereInput!]
  id: IDFilter
  model: StringFilter
  brand: StringFilter
  price: IntFilter
  yearOfManufacture: IntFilter
  upgradeList: UpgradeManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UpgradeManyRelationFilter {
  every: UpgradeWhereInput
  some: UpgradeWhereInput
  none: UpgradeWhereInput
}

input CarOrderByInput {
  id: OrderDirection
  model: OrderDirection
  brand: OrderDirection
  price: OrderDirection
  yearOfManufacture: OrderDirection
}

input CarUpdateInput {
  model: String
  brand: String
  price: Int
  yearOfManufacture: Int
  upgradeList: UpgradeRelateToManyForUpdateInput
}

input UpgradeRelateToManyForUpdateInput {
  disconnect: [UpgradeWhereUniqueInput!]
  set: [UpgradeWhereUniqueInput!]
  create: [UpgradeCreateInput!]
  connect: [UpgradeWhereUniqueInput!]
}

input CarUpdateArgs {
  where: CarWhereUniqueInput!
  data: CarUpdateInput!
}

input CarCreateInput {
  model: String
  brand: String
  price: Int
  yearOfManufacture: Int
  upgradeList: UpgradeRelateToManyForCreateInput
}

input UpgradeRelateToManyForCreateInput {
  create: [UpgradeCreateInput!]
  connect: [UpgradeWhereUniqueInput!]
}

type Upgrade {
  id: ID!
  upgardeYear: Int
  cars: Car
}

input UpgradeWhereUniqueInput {
  id: ID
}

input UpgradeWhereInput {
  AND: [UpgradeWhereInput!]
  OR: [UpgradeWhereInput!]
  NOT: [UpgradeWhereInput!]
  id: IDFilter
  upgardeYear: IntFilter
  cars: CarWhereInput
}

input UpgradeOrderByInput {
  id: OrderDirection
  upgardeYear: OrderDirection
}

input UpgradeUpdateInput {
  upgardeYear: Int
  cars: CarRelateToOneForUpdateInput
}

input CarRelateToOneForUpdateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
  disconnect: Boolean
}

input UpgradeUpdateArgs {
  where: UpgradeWhereUniqueInput!
  data: UpgradeUpdateInput!
}

input UpgradeCreateInput {
  upgardeYear: Int
  cars: CarRelateToOneForCreateInput
}

input CarRelateToOneForCreateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
}

type Student {
  id: ID!
  name: String
  class: StudentClassType
  books(
    where: BookAssignmentWhereInput! = {}
    orderBy: [BookAssignmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BookAssignment!]
  booksCount(where: BookAssignmentWhereInput! = {}): Int
}

enum StudentClassType {
  firstYear
  secondYear
}

input StudentWhereUniqueInput {
  id: ID
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  name: StringFilter
  class: StudentClassTypeNullableFilter
  books: BookAssignmentManyRelationFilter
}

input StudentClassTypeNullableFilter {
  equals: StudentClassType
  in: [StudentClassType!]
  notIn: [StudentClassType!]
  not: StudentClassTypeNullableFilter
}

input BookAssignmentManyRelationFilter {
  every: BookAssignmentWhereInput
  some: BookAssignmentWhereInput
  none: BookAssignmentWhereInput
}

input StudentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  class: OrderDirection
}

input StudentUpdateInput {
  name: String
  class: StudentClassType
  books: BookAssignmentRelateToManyForUpdateInput
}

input BookAssignmentRelateToManyForUpdateInput {
  disconnect: [BookAssignmentWhereUniqueInput!]
  set: [BookAssignmentWhereUniqueInput!]
  create: [BookAssignmentCreateInput!]
  connect: [BookAssignmentWhereUniqueInput!]
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  name: String
  class: StudentClassType
  books: BookAssignmentRelateToManyForCreateInput
}

input BookAssignmentRelateToManyForCreateInput {
  create: [BookAssignmentCreateInput!]
  connect: [BookAssignmentWhereUniqueInput!]
}

type Book {
  id: ID!
  title: String
  category: BookCategoryType
  assignedToStudents(
    where: BookAssignmentWhereInput! = {}
    orderBy: [BookAssignmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BookAssignment!]
  assignedToStudentsCount(where: BookAssignmentWhereInput! = {}): Int
}

enum BookCategoryType {
  ComputerScience
  Arts
  Business
  Accounts
}

input BookWhereUniqueInput {
  id: ID
}

input BookWhereInput {
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  id: IDFilter
  title: StringFilter
  category: BookCategoryTypeNullableFilter
  assignedToStudents: BookAssignmentManyRelationFilter
}

input BookCategoryTypeNullableFilter {
  equals: BookCategoryType
  in: [BookCategoryType!]
  notIn: [BookCategoryType!]
  not: BookCategoryTypeNullableFilter
}

input BookOrderByInput {
  id: OrderDirection
  title: OrderDirection
  category: OrderDirection
}

input BookUpdateInput {
  title: String
  category: BookCategoryType
  assignedToStudents: BookAssignmentRelateToManyForUpdateInput
}

input BookUpdateArgs {
  where: BookWhereUniqueInput!
  data: BookUpdateInput!
}

input BookCreateInput {
  title: String
  category: BookCategoryType
  assignedToStudents: BookAssignmentRelateToManyForCreateInput
}

type BookAssignment {
  id: ID!
  bookName: Book
  studentName: Student
}

input BookAssignmentWhereUniqueInput {
  id: ID
}

input BookAssignmentWhereInput {
  AND: [BookAssignmentWhereInput!]
  OR: [BookAssignmentWhereInput!]
  NOT: [BookAssignmentWhereInput!]
  id: IDFilter
  bookName: BookWhereInput
  studentName: StudentWhereInput
}

input BookAssignmentOrderByInput {
  id: OrderDirection
}

input BookAssignmentUpdateInput {
  bookName: BookRelateToOneForUpdateInput
  studentName: StudentRelateToOneForUpdateInput
}

input BookRelateToOneForUpdateInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
  disconnect: Boolean
}

input StudentRelateToOneForUpdateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
}

input BookAssignmentUpdateArgs {
  where: BookAssignmentWhereUniqueInput!
  data: BookAssignmentUpdateInput!
}

input BookAssignmentCreateInput {
  bookName: BookRelateToOneForCreateInput
  studentName: StudentRelateToOneForCreateInput
}

input BookRelateToOneForCreateInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

input StudentRelateToOneForCreateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCar(data: CarCreateInput!): Car
  createCars(data: [CarCreateInput!]!): [Car]
  updateCar(where: CarWhereUniqueInput!, data: CarUpdateInput!): Car
  updateCars(data: [CarUpdateArgs!]!): [Car]
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteCars(where: [CarWhereUniqueInput!]!): [Car]
  createUpgrade(data: UpgradeCreateInput!): Upgrade
  createUpgrades(data: [UpgradeCreateInput!]!): [Upgrade]
  updateUpgrade(
    where: UpgradeWhereUniqueInput!
    data: UpgradeUpdateInput!
  ): Upgrade
  updateUpgrades(data: [UpgradeUpdateArgs!]!): [Upgrade]
  deleteUpgrade(where: UpgradeWhereUniqueInput!): Upgrade
  deleteUpgrades(where: [UpgradeWhereUniqueInput!]!): [Upgrade]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(
    where: StudentWhereUniqueInput!
    data: StudentUpdateInput!
  ): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createBook(data: BookCreateInput!): Book
  createBooks(data: [BookCreateInput!]!): [Book]
  updateBook(where: BookWhereUniqueInput!, data: BookUpdateInput!): Book
  updateBooks(data: [BookUpdateArgs!]!): [Book]
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteBooks(where: [BookWhereUniqueInput!]!): [Book]
  createBookAssignment(data: BookAssignmentCreateInput!): BookAssignment
  createBookAssignments(data: [BookAssignmentCreateInput!]!): [BookAssignment]
  updateBookAssignment(
    where: BookAssignmentWhereUniqueInput!
    data: BookAssignmentUpdateInput!
  ): BookAssignment
  updateBookAssignments(data: [BookAssignmentUpdateArgs!]!): [BookAssignment]
  deleteBookAssignment(where: BookAssignmentWhereUniqueInput!): BookAssignment
  deleteBookAssignments(
    where: [BookAssignmentWhereUniqueInput!]!
  ): [BookAssignment]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  cars(
    where: CarWhereInput! = {}
    orderBy: [CarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Car!]
  car(where: CarWhereUniqueInput!): Car
  carsCount(where: CarWhereInput! = {}): Int
  upgrades(
    where: UpgradeWhereInput! = {}
    orderBy: [UpgradeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Upgrade!]
  upgrade(where: UpgradeWhereUniqueInput!): Upgrade
  upgradesCount(where: UpgradeWhereInput! = {}): Int
  students(
    where: StudentWhereInput! = {}
    orderBy: [StudentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Student!]
  student(where: StudentWhereUniqueInput!): Student
  studentsCount(where: StudentWhereInput! = {}): Int
  books(
    where: BookWhereInput! = {}
    orderBy: [BookOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Book!]
  book(where: BookWhereUniqueInput!): Book
  booksCount(where: BookWhereInput! = {}): Int
  bookAssignments(
    where: BookAssignmentWhereInput! = {}
    orderBy: [BookAssignmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BookAssignment!]
  bookAssignment(where: BookAssignmentWhereUniqueInput!): BookAssignment
  bookAssignmentsCount(where: BookAssignmentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
